#+STARTUP: content
* install
  #+BEGIN_SRC shell
    git clone --depth=1 git@github.com:firslov/.emacs.d.git
  #+END_SRC
* packages
** resources
   #+BEGIN_SRC emacs-lisp
     (when (>= emacs-major-version 24)
       (require 'package)
       (setq package-archives '(("gnu"   . "http://elpa.emacs-china.org/gnu/")
				("melpa" . "http://elpa.emacs-china.org/melpa/")))
       (package-initialize))
   #+END_SRC
** use-package
   #+BEGIN_SRC emacs-lisp
  ;; Add use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
   #+END_SRC
** packages
*** exec
    #+BEGIN_SRC emacs-lisp
      (use-package exec-path-from-shell
	:ensure t
	:config
	(setq exec-path-from-shell-arguments '("-l"))
	(when (memq window-system '(mac ns x))
	  (exec-path-from-shell-initialize)))
    #+END_SRC
*** magit
    #+BEGIN_SRC emacs-lisp
      (use-package magit
	:ensure t)
    #+END_SRC
*** which-key
    #+BEGIN_SRC emacs-lisp
      (use-package which-key
	:ensure t
	:config (which-key-mode))
    #+END_SRC
*** neotree
    #+BEGIN_SRC emacs-lisp
      (use-package neotree
	:ensure t
	:config
	(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
	(setq projectile-switch-project-action 'neotree-projectile-action))
    #+END_SRC
*** org-download
    #+BEGIN_SRC emacs-lisp
      (use-package org-download
	:ensure t
	;; :defer t
	:config
	;; Drag-and-drop to `dired`
	(add-hook 'dired-mode-hook 'org-download-enable)
	(setq-default org-download-image-dir "./src")
	(setq org-download-display-inline-images nil))
    #+END_SRC
*** highlight-parentheses
    #+BEGIN_SRC emacs-lisp
      (use-package highlight-parentheses
	:ensure t
	:config
	(define-globalized-minor-mode global-highlight-parentheses-mode
	  highlight-parentheses-mode
	  (lambda ()
	    (highlight-parentheses-mode t)))
	(global-highlight-parentheses-mode t))
    #+END_SRC
*** youdao-dictionary
    #+BEGIN_SRC emacs-lisp
      (use-package youdao-dictionary
	:ensure t
	:defer t
	:config
	;; enable cache
	(setq url-automatic-caching t))
    #+END_SRC
*** swiper
    #+BEGIN_SRC emacs-lisp
      (use-package counsel
	:ensure t)
      (use-package swiper
	:ensure t
	:bind (
	       ("C-s" . swiper)
	       ("M-n" . next-error)
	       ("M-p" . previous-error)
	       ("C-c C-r" . ivy-resume)
	       ("M-x" . counsel-M-x)
	       ("C-x C-f" . counsel-find-file)
	       ("<f1> f" . counsel-describe-function)
	       ("<f1> v" . counsel-describe-variable)
	       ("<f1> o" . counsel-describe-symbol)
	       ("<f1> l" . counsel-find-library)
	       ("C-c g" . counsel-git)
	       ("C-c j" . counsel-git-grep)
	       )
	:config
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers t)
	(setq enable-recursive-minibuffers t)
	(setq ivy-use-virtual-buffers t)
	(setq enable-recursive-minibuffers t))
    #+END_SRC
*** doom
    #+BEGIN_SRC emacs-lisp
      ;; (use-package doom-themes
      ;;   :ensure t)
      ;; (use-package doom-modeline
      ;;   :ensure t
      ;;   :hook (emacs-startup . doom-modeline-mode)
      ;;   :config
      ;;   (setq
      ;;    ;; inhibit-compacting-font-caches t
      ;;    ;; doom-modeline-height 1
      ;;    doom-modeline-buffer-file-name-style 'auto
      ;;    ;; doom-modeline-icon nil
      ;;    ;; doom-modeline-project-detection 'project
      ;;    ))
    #+END_SRC
*** company
    #+BEGIN_SRC emacs-lisp
      (use-package company
	:ensure t
	:config
	(add-hook 'after-init-hook 'global-company-mode))
    #+END_SRC
*** yasnippet
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
	:ensure t
	:config
	(setq yas-snippet-dirs
	      '("~/.emacs.d/snippets"))
	(yas-global-mode 1))
    #+END_SRC
*** undo-tree
    #+BEGIN_SRC emacs-lisp
      (use-package undo-tree
	:ensure t
	:config (global-undo-tree-mode))
    #+END_SRC
*** projectile
    #+BEGIN_SRC emacs-lisp
      (use-package projectile
	:ensure t
	:config
	(projectile-mode +1)
	(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
	(setq projectile-indexing-method 'native)
	(setq projectile-completion-system 'ivy))
    #+END_SRC
*** misc packages
    #+BEGIN_SRC emacs-lisp
      (use-package recentf
	:bind ("C-x C-r" . recentf-open-files)
	:config
	(recentf-mode 1)
	(setq recentf-max-menu-item 10))
      (use-package all-the-icons
	:ensure t) 
      (use-package restart-emacs
	:ensure t)
      (use-package org-bullets
	:ensure t
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
      (use-package ace-window
	:ensure t
	:config
	(global-set-key [remap other-window] 'ace-window)
	(custom-set-faces
	 '(aw-leading-char-face
	   ((t (:inderit ace-jump-face-foreground :height 3.0))))))
      (use-package diminish
	:ensure t
	:diminish (ivy-mode eldoc-mode which-key-mode))
      (use-package org-equation-live-preview
	:load-path "~/.emacs.d/lisp/org-equation-live-preview/")
      ;; (use-package init-site)
    #+END_SRC
** python
*** elpy
    #+BEGIN_SRC emacs-lisp
      (use-package elpy
	:ensure t
	:config
	(elpy-enable)
	;; Use IPython for REPL
	(setq python-shell-interpreter "jupyter"
	      python-shell-interpreter-args "console --simple-prompt"
	      python-shell-prompt-detect-failure-warning nil)
	(add-to-list 'python-shell-completion-native-disabled-interpreters
		     "jupyter"))
    #+END_SRC
*** py-autopep8
    #+BEGIN_SRC emacs-lisp
      (use-package py-autopep8
	:ensure t
	:config
	(add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
	(setq py-autopep8-options '("--max-line-length=100")))
    #+END_SRC
*** flycheck
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck
	:ensure t
	:config
	(global-flycheck-mode)
	(setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
	(add-hook 'elpy-mode-hook 'flycheck-mode))
    #+END_SRC
*** ein
    #+BEGIN_SRC emacs-lisp
  (use-package ein
    :ensure t)
    #+END_SRC
* diff-sys
** window-nt
   #+BEGIN_SRC emacs-lisp
     (when (eq system-type 'windows-nt)
       (setq conf_dir "e:/emacs/.emacs.d/"
	     org-directory "e:/org/"
	     init-file (concat conf_dir "lisp/init-main.el")
	     init-sys (concat conf_dir "lisp/windows-nt.el"))
       ;; init fullscreen
       (add-to-list 'default-frame-alist '(fullscreen . maximized))
       ;; 快速打开blog文件
       (defun open-blog()
	 (interactive)
	 (find-file "e:/emacs/site/org/index.org")
	 (blog-mode)
	 (neotree-dir "e:/emacs/site/"))
       ;; refresh startup function
       (defun show-startup-page()
	 (interactive)
	 (org-agenda-list)
	 (org-agenda-day-view)
	 (neotree-dir "e:/org/"))
       ;; (add-hook 'window-setup-hook 'show-startup-page)
       (setq display-buffer-alist
	     '(("\\*e?shell\\*"
		(display-buffer-in-side-window)
		(window-height . 0.2)
		(side . bottom)
		(slot . -1))
	       ("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\|[Hh]elp\\|Messages\\)\\*"
		(display-buffer-in-side-window)
		(window-height . 0.25)
		(side . bottom)
		(slot . 0))
	       ))
       )
   #+END_SRC
** darwin
   #+BEGIN_SRC emacs-lisp
     (when (eq system-type 'darwin)
       (setq conf_dir "~/.emacs.d/"
	     org-directory "~/Documents/org/"
	     init-file (concat conf_dir "lisp/init-main.el")
	     init-sys (concat conf_dir "lisp/darwin.el"))
       ;; font
       (set-default-font "MesloLGLDZ Nerd Font 15") 
       ;; 快速打开blog文件
       (defun blog()
	 (interactive)
	 (find-file "~/site/org/index.org")
	 (blog-mode)
	 (neotree-dir "~/site/"))
       ;; refresh startup function
       (defun show-startup-page()
	 (interactive)
	 (org-agenda-list)
	 (org-agenda-day-view)
	 (neotree-dir "~/Documents/org/")
	 (other-window -1))
       ;; (add-hook 'window-setup-hook 'show-startup-page)
       (setq display-buffer-alist
	     '(("\\*e?shell\\*"
		(display-buffer-in-side-window)
		(window-height . 0.3)
		(side . bottom)
		(slot . -1))
	       ("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\|[Hh]elp\\|Messages\\)\\*"
		(display-buffer-in-side-window)
		(window-width . 0.5)
		(side . right)
		(slot . 1))
	       ))
       )
   #+END_SRC
*** awesome
**** awesome-theme
     #+BEGIN_SRC emacs-lisp
  (use-package lazycat-theme
    :load-path "~/.emacs.d/lisp/lazycat-theme")
     #+END_SRC
**** awesome-tray
     #+BEGIN_SRC emacs-lisp
       (use-package awesome-tray
	 :load-path "~/.emacs.d/lisp/awesome-tray"
	 :config
	 (awesome-tray-mode 1)
	 (setq awesome-tray-active-modules '("location" "parent-dir" "mode-name" "git" "date"))
	 (lazycat-theme-load-dark))
     #+END_SRC
**** awesome-tab
     #+BEGIN_SRC emacs-lisp
   (use-package awesome-tab
     :load-path "~/.emacs.d/lisp/awesome-tab"
     :config
     (awesome-tab-mode t))
     #+END_SRC
* user-config
** config
   #+BEGIN_SRC emacs-lisp
     ;; 启动页面
     ;; (setq initial-buffer-choice (concat org-directory "note.org"))
     ;; 关闭欢迎界面
     (setq inhibit-splash-screen t)
     ;; fonts problem
     (setq inhibit-compacting-font-caches t)
     ;; Enable line numbers globally
     (global-linum-mode t)
     ;; disable alert voice
     (setq ring-bell-function 'ignore)
     ;; UI
     (tool-bar-mode 0)
     (scroll-bar-mode 0)
     (menu-bar-mode t)
     ;; Highlight the "()"
     (show-paren-mode t)
     ;; Auto complete the "()"
     (electric-pair-mode t)
     ;; Set the electric-pair-mode's pair keywords
     (setq electric-pair-pairs
	   '((?\" . ?\")
	     (?\( . ?\))
	     (?\< . ?\>)
	     (?\{ . ?\})))
     (setq-default cursor-type 'bar)
     ;; Save the point position
     (save-place-mode t)
     ;; 设置默认读入文件编码
     (prefer-coding-system 'gbk)
     ;; 设置写入文件编码
     (setq default-buffer-file-coding-system 'gbk)
     ;; disable backup
     (setq make-backup-files nil)
     ;; disable auto-save
     (setq auto-save-default nil)
     ;; yes-or-no y-or-n
     (fset 'yes-or-no-p 'y-or-n-p)
     ;; select input delete
     (delete-selection-mode 1)
     ;; highlight current line
     (global-hl-line-mode 1)
     ;; autoload change out of emacs
     (global-auto-revert-mode 1)
     ;; highlight in org-mode
     (setq org-src-fontify-natively t)
     ;; 自动换行
     (toggle-truncate-lines 1)
     ;; emacs guess indent
     (setq python-indent-guess-indent-offset nil) 
   #+END_SRC
** key-bind
   #+BEGIN_SRC emacs-lisp
     ;; save all buffers
     (global-set-key (kbd "<f12>") 'org-save-all-org-buffers)
     ;; 绑定 <f5> 键上
     (global-set-key (kbd "<f5>") 'youdao-dictionary-search-at-point)
     ;; ibuffer
     (global-set-key (kbd "C-x C-b") 'ibuffer)
     ;; show startup page
     (global-set-key (kbd "C-.") 'show-startup-page)
     ;; 将函数 load-init-file 绑定到 <f1> 0 键上
     (global-set-key (kbd "<f1> 0") 'load-init)
     ;; 将函数 open-init-file 绑定到 <f1> 1 键上
     (global-set-key (kbd "<f1> 1") 'open-init-file)
     ;; 将函数 indent-buffer 绑定到 <f8> 键上
     (global-set-key (kbd "<f8>") 'indent-buffer)
     ;; 上下翻半页
     (global-set-key "\M-n" 'scroll-half-page-up)
     (global-set-key "\M-p" 'scroll-half-page-down)
   #+END_SRC
** function
   #+BEGIN_SRC emacs-lisp
     ;; 快速打开配置文件
     (defun open-init-file()
       (interactive)
       (find-file (concat conf_dir "readme.org")))
     ;; 快速加载配置文件
     (defun load-init()
       (interactive)
       (org-babel-load-file (concat conf_dir "readme.org")))
     ;; neotree list config-dir
     (defun nconf()
       (interactive)
       (neotree-dir conf_dir)
       (other-window -1))
     ;; format the buffer
     (defun indent-buffer()
       (interactive)
       (indent-region (point-min) (point-max)))
     ;; 翻页
     (defun scroll-half-page-down ()
       "scroll down half the page"
       (interactive)
       (scroll-down (/ (window-body-height) 2)))
     (defun scroll-half-page-up ()
       "scroll up half the page"
       (interactive)
       (scroll-up (/ (window-body-height) 2)))
     ;; 窗口启动位置大小
     (defun init-my-frame ()
       (set-frame-position (selected-frame) 160 80)
       (set-frame-width (selected-frame) 120)
       (set-frame-height (selected-frame) 30))
     (add-hook 'after-init-hook 'init-my-frame)
     ;; set alpha
     (defun set-alpha (var)
       "Set the backgroud alpha by VAR."
       (interactive "sAlpha or not(y-or-n): ")
       (pcase var
	 ("y" (set-frame-parameter nil 'alpha '(90 . 100)))
	 ("n" (set-frame-parameter nil 'alpha '(100 . 100)))))
   #+END_SRC
** mode
   #+BEGIN_SRC emacs-lisp
  ;; blog mode
  (define-minor-mode blog-mode
    "Toggle blog mode."
    :global nil
    :lighter "Blog")
   #+END_SRC
** transparency
   #+BEGIN_SRC emacs-lisp
    ;; @purcell
    (defun sanityinc/adjust-opacity (frame incr)
      "Adjust the background opacity of FRAME by increment INCR."
      (unless (display-graphic-p frame)
	(error "Cannot adjust opacity of this frame"))
      (let* ((oldalpha (or (frame-parameter frame 'alpha) 100))
	     (oldalpha (if (listp oldalpha) (car oldalpha) oldalpha))
	     (newalpha (+ incr oldalpha)))
	(when (and (<= frame-alpha-lower-limit newalpha) (>= 100 newalpha))
	  (modify-frame-parameters frame (list (cons 'alpha newalpha))))))
    (global-set-key (kbd "M-C-8") (lambda ()
				    (interactive)
				    (sanityinc/adjust-opacity nil -2)))
    (global-set-key (kbd "M-C-9") (lambda ()
				    (interactive)
				    (sanityinc/adjust-opacity nil 2)))
    (global-set-key (kbd "M-C-7") (lambda ()
				    (interactive)
				    (modify-frame-parameters nil `((alpha . 100)))))
   #+END_SRC
* org
  #+BEGIN_SRC emacs-lisp
    ;; org variables
    (setq org-agenda-files (list (concat org-directory "inbox.org"))
	  org-agenda-skip-function-global '(org-agenda-skip-entry-if 'regexp "\\* DONE\\|\\* CANCELED")
	  ;; org-agenda-skip-function-global '(org-agenda-skip-entry-if 'notregexp "\\* DONE\\|\\* CANCELED")
	  org-agenda-show-future-repeats nil
	  org-deadline-warning-days 30
	  org-agenda-window-setup nil
	  org-M-RET-may-split-line '((headline . nil))
	  org-agenda-time-grid '((daily today require-timed)
				 (1000 1400 1600 2000 2200)
				 "......" "----------------")
	  org-capture-templates
	  `(("i" "Inbox" entry (file+headline ,(concat org-directory "inbox.org") "Inbox:")
	     "* %?")
	    ("j" "Journal" entry (file+datetree ,(concat org-directory "journal.org"))
	     "* %U\n%?")
	    ("a" "Arrangement" entry (file+headline ,(concat org-directory "inbox.org") "Arrangement:")
	     "* %? %^T")
	    ("t" "Todo")
	    ("tt" "Todo without time" entry (file+headline ,(concat org-directory "inbox.org") "Todo:")
	     "* TODO %?")
	    ("ts" "Todo with SCHEDULED" entry (file+headline ,(concat org-directory "inbox.org") "Todo:")
	     "* TODO %?\nSCHEDULED:%^t")
	    ("td" "Todo with DEADLINE" entry (file+headline ,(concat org-directory "inbox.org") "Todo:")
	     "* TODO %?\nDEADLINE:%^t"))
	  ;; org-refile-targets
	  ;; `((,(concat org-directory "note.org") :maxlevel . 2))
	  ;; `((,(concat org-directory "read.org") :maxlevel . 1)
	  ;; (,(concat org-directory "learn.org") :maxlevel . 1)
	  ;; (,(concat org-directory "emacs.org") :level . 1))
	  org-todo-keywords
	  '((sequence "TODO(t)" "CANCELED(c)" "|" "DONE(d)"))
	  org-todo-keyword-faces
	  '(("DAILY" . "green")
	    ("CANCELED" . "grey")))
    ;; set key
    (define-key global-map "\C-cc" 'org-capture)
    (define-key global-map "\M-q" 'org-agenda)
  #+END_SRC

